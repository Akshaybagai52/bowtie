name: Regenerate Test Reports

on:
  release:
    types: [published]
  workflow_call:
  workflow_dispatch:
  schedule:
    # Daily at 2:15
    - cron: "15 2 * * *"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  previous-reports:
    runs-on: ubuntu-latest
    steps:
      - name: Download the previous reports
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: report.yml
          name: report-.*
          name_is_regexp: true
          path: previous
          if_no_artifact_found: warn

      - name: Store previous reports for inclusion
        uses: actions/upload-artifact@v4
        with:
          name: previous-reports
          path: previous

  dialects:
    runs-on: ubuntu-latest
    outputs:
      dialects: ${{ steps.dialects-matrix.outputs.dialects }}
    steps:
      - uses: actions/checkout@v4
      - name: Collect supported dialects
        id: dialects-matrix
        run: |
          printf 'dialects=%s\n' "$(jq -c '[.[].shortName]' data/dialects.json)" >> $GITHUB_OUTPUT

  regenerate-reports:
    needs: dialects
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.dialects.outputs.dialects) }}

    steps:
      # FIXME: we can skip checking out if we are able to list all images in
      #        the image repository
      - uses: actions/checkout@v4

      - name: Install Bowtie
        uses: ./

      - run: docker system df

      # FIXME: This definitely should not be necessary, as Bowtie should pull
      #        images, but we're observing strange behavior where that ends up
      #        pulling every single version of every single image.
      #        It only seems to happen with Docker (not Podman), and seems to
      #        be the case even though we now use create() rather than run()
      #        in aiodocker. More diagnosis needed to see what the heck is
      #        happening.
      - name: Pre-fetch all images
        run: |
          for each in implementations/*; do
            docker pull "ghcr.io/bowtie-json-schema/$(basename $each):latest" &
          done
          wait

      - name: Generate a New Report
        run: |
          bowtie suite $(ls implementations/ | sed 's/^/-i /') https://github.com/json-schema-org/JSON-Schema-Test-Suite/tree/main/tests/${{ matrix.version }} >${{ matrix.version }}.json

      - run: docker system df
        if: always()

      # This unfortunately can go wrong if e.g. we ever run out of memory above.
      # Probably we should also atomically move files into place.
      - name: Check Report is Valid
        run: |
          bowtie summary --show failures ${{ matrix.version }}.json --format markdown >> $GITHUB_STEP_SUMMARY

      - uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.version }}
          path: ${{ matrix.version }}.json

  site:
    needs:
      - regenerate-reports
      - previous-reports
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Bowtie
        uses: ./

      - name: Create our Site Structure
        run: mkdir site

      - name: Include Previous Report
        uses: actions/download-artifact@v4
        with:
          name: previous-report
          path: site/previous/

      - name: Include New Reports
        uses: actions/download-artifact@v4
        with:
          pattern: report-*
          path: site/
          merge-multiple: true

      - name: Generate Badges
        run: bowtie badges

      - uses: actions/upload-artifact@v4
        with:
          name: site
          path: site

  deploy-frontend:
    needs: site
    uses: ./.github/workflows/deploy-frontend.yml
    with:
      report_artifact_in_scope: true
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
